FUNCTION_BLOCK "fb_D-Control_V18.0.2"
TITLE = D-Regler
{ S7_Optimized_Access := 'TRUE' }
AUTHOR : sf
FAMILY : HKS
VERSION : 1.0
   VAR_INPUT 
      ir_SetpointDiverence { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 0.0;
      ir_DerivateGain { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 5.0;
      ir_DerivateActionTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real := 1.0;
      ib_Reset { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Bool := FALSE;
   END_VAR

   VAR_OUTPUT 
      or_Output { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
   END_VAR

   VAR 
      Intermediate_value { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      PastTime { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : Real;
      StaticCycleTime_Aux { ExternalAccessible := 'False'; ExternalVisible := 'False'; ExternalWritable := 'False'} : LReal;
   END_VAR

   VAR CONSTANT 
      Lower_limit : Real := -100.0;
      Upper_limit : Real := 100.0;
   END_VAR


BEGIN
	#PastTime := LREAL_TO_REAL(RUNTIME(#StaticCycleTime_Aux));
	IF #ir_DerivateActionTime = 0 OR #ib_Reset THEN
	    #Intermediate_value := 0;
	    #or_Output := 0;
	ELSE
	    IF #PastTime > 0 AND #PastTime < 2.0 THEN
	        #Intermediate_value += (#ir_SetpointDiverence - #Intermediate_value) * #PastTime / #ir_DerivateActionTime;
	    END_IF;
	    #or_Output := LIMIT(MN := #Lower_limit,
	                        IN := (#ir_SetpointDiverence - #Intermediate_value) * #ir_DerivateGain,
	                        MX := #Upper_limit);
	END_IF;
END_FUNCTION_BLOCK

